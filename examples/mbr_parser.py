from dataclasses import dataclass

from auto_struct import BasicStruct, uint8_t, Array, uint32_t, uint16_t


class CHS(Array(uint8_t, 3)):
    @property
    def head(self):
        return self[0]

    @property
    def cylinder(self):
        return (self[1] & 0xc0) << 2 | self[2]

    @property
    def sector(self):
        return self[2] & 0x3f


@dataclass
class Partition(BasicStruct):
    status: uint8_t
    start: CHS
    type: uint8_t
    end: CHS
    first_lba: uint32_t
    sector_count: uint32_t


class MBRSignature(uint16_t):
    pass

@dataclass
class MBR(BasicStruct):
    code: Array(uint8_t, 446)
    part_table: Array(Partition, 4)
    signature: MBRSignature


l = [0xeb, 0x63, 0x90, 0xd0, 0xbc, 0x00, 0x7c, 0x8e, 0xc0, 0x8e, 0xd8, 0xbe,
                 0x0, 0x7c, 0xbf, 0x00, 0x06, 0xb9, 0x00, 0x02, 0xfc, 0xf3, 0xa4, 0x50,
                 0x68, 0x1c, 0x06, 0xcb, 0xfb, 0xb9, 0x04, 0x00, 0xbd, 0xbe, 0x07, 0x80,
                 0x7e, 0x00, 0x00, 0x7c, 0x0b, 0x0f, 0x85, 0x0e, 0x01, 0x83, 0xc5, 0x10,
                 0xe2, 0xf1, 0xcd, 0x18, 0x88, 0x56, 0x00, 0x55, 0xc6, 0x46, 0x11, 0x05,
                 0xc6, 0x46, 0x10, 0x00, 0xb4, 0x41, 0xbb, 0xaa, 0x55, 0xcd, 0x13, 0x5d,
                 0x72, 0x0f, 0x81, 0xfb, 0x55, 0xaa, 0x75, 0x09, 0xf7, 0xc1, 0x01, 0x00,
                 0x74, 0x03, 0xfe, 0x46, 0x10, 0x66, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
                 0x00, 0x00, 0x00, 0x00, 0xff, 0xfa, 0x90, 0x90, 0xf6, 0xc2, 0x80, 0x74,
                 0x05, 0xf6, 0xc2, 0x70, 0x74, 0x02, 0xb2, 0x80, 0xea, 0x79, 0x7c, 0x00,
                 0x00, 0x31, 0xc0, 0x8e, 0xd8, 0x8e, 0xd0, 0xbc, 0x00, 0x20, 0xfb, 0xa0,
                 0x64, 0x7c, 0x3c, 0xff, 0x74, 0x02, 0x88, 0xc2, 0x52, 0xbb, 0x17, 0x04,
                 0xf6, 0x07, 0x03, 0x74, 0x06, 0xbe, 0x88, 0x7d, 0xe8, 0x17, 0x01, 0xbe,
                 0x05, 0x7c, 0xb4, 0x41, 0xbb, 0xaa, 0x55, 0xcd, 0x13, 0x5a, 0x52, 0x72,
                 0x3d, 0x81, 0xfb, 0x55, 0xaa, 0x75, 0x37, 0x83, 0xe1, 0x01, 0x74, 0x32,
                 0x31, 0xc0, 0x89, 0x44, 0x04, 0x40, 0x88, 0x44, 0xff, 0x89, 0x44, 0x02,
                 0xc7, 0x04, 0x10, 0x00, 0x66, 0x8b, 0x1e, 0x5c, 0x7c, 0x66, 0x89, 0x5c,
                 0x08, 0x66, 0x8b, 0x1e, 0x60, 0x7c, 0x66, 0x89, 0x5c, 0x0c, 0xc7, 0x44,
                 0x06, 0x00, 0x70, 0xb4, 0x42, 0xcd, 0x13, 0x72, 0x05, 0xbb, 0x00, 0x70,
                 0xeb, 0x76, 0xb4, 0x08, 0xcd, 0x13, 0x73, 0x0d, 0x5a, 0x84, 0xd2, 0x0f,
                 0x83, 0xd0, 0x00, 0xbe, 0x93, 0x7d, 0xe9, 0x82, 0x00, 0x66, 0x0f, 0xb6,
                 0xc6, 0x88, 0x64, 0xff, 0x40, 0x66, 0x89, 0x44, 0x04, 0x0f, 0xb6, 0xd1,
                 0xc1, 0xe2, 0x02, 0x88, 0xe8, 0x88, 0xf4, 0x40, 0x89, 0x44, 0x08, 0x0f,
                 0xb6, 0xc2, 0xc0, 0xe8, 0x02, 0x66, 0x89, 0x04, 0x66, 0xa1, 0x60, 0x7c,
                 0x66, 0x09, 0xc0, 0x75, 0x4e, 0x66, 0xa1, 0x5c, 0x7c, 0x66, 0x31, 0xd2,
                 0x66, 0xf7, 0x34, 0x88, 0xd1, 0x31, 0xd2, 0x66, 0xf7, 0x74, 0x04, 0x3b,
                 0x44, 0x08, 0x7d, 0x37, 0xfe, 0xc1, 0x88, 0xc5, 0x30, 0xc0, 0xc1, 0xe8,
                 0x02, 0x08, 0xc1, 0x88, 0xd0, 0x5a, 0x88, 0xc6, 0xbb, 0x00, 0x70, 0x8e,
                 0xc3, 0x31, 0xdb, 0xb8, 0x01, 0x02, 0xcd, 0x13, 0x72, 0x1e, 0x8c, 0xc3,
                 0x60, 0x1e, 0xb9, 0x00, 0x01, 0x8e, 0xdb, 0x31, 0xf6, 0xbf, 0x00, 0x80,
                 0x8e, 0xc6, 0xfc, 0xf3, 0xa5, 0x1f, 0x61, 0xff, 0x26, 0x5a, 0x7c, 0xbe,
                 0x8e, 0x7d, 0xeb, 0x03, 0xbe, 0x9d, 0x7d, 0xe8, 0x34, 0x00, 0xbe, 0xa2,
                 0x7d, 0xe8, 0x2e, 0x00, 0xcd, 0x18, 0xeb, 0xfe, 0x47, 0x52, 0x55, 0x42,
                 0x20, 0x00, 0x47, 0x65, 0x6f, 0x6d, 0x00, 0x48, 0x61, 0x72, 0x64, 0x20,
                 0x44, 0x69, 0x73, 0x6b, 0x00, 0x52, 0x65, 0x61, 0x64, 0x00, 0x20, 0x45,
                 0x72, 0x72, 0x6f, 0x72, 0x0d, 0x0a, 0x00, 0xbb, 0x01, 0x00, 0xb4, 0x0e,
                 0xcd, 0x10, 0xac, 0x3c, 0x00, 0x75, 0xf4, 0xc3, 0x82, 0x3c, 0xe9, 0x9a,
                 0x00, 0x00, 0x80, 0xfe, 0xff, 0xff, 0x82, 0xfe, 0xff, 0xff, 0x00, 0x20,
                 0x6c, 0x55, 0x00, 0x40, 0xe8, 0x01, 0x00, 0x20, 0x1f, 0x00, 0x05, 0xfe,
                 0xff, 0xff, 0xfe, 0x07, 0x00, 0x00, 0x02, 0x18, 0x6c, 0x55, 0x00, 0x00,
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa]

assert len(l) == 512
mbr = MBR.parse(l)

print(mbr)
